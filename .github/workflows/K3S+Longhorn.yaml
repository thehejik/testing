# This workflow will deploy 1:2 nodes K3S cluster with Longhorn on top of it

name: K3S-Longhorn

# Controls when the workflow will run
on:
  # push:
    # branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      k3s_version:
        description: k3s_version "v1.25.5+k3s2" or "v1.24"
        default: v1.24.9+k3s2
        type: string
        required: true
      keep_env:
        description: keeps the env running if not empty
        required: false
        default: ""

concurrency: testing

jobs:
  preparation:
    runs-on: self-hosted

    steps:
      - name: Checkout validator from gitlab
        run: |
          git config --global http.sslVerify false
          git clone --recurse-submodules https://gitlab.suse.de/mkravec/scripts.git

      - name: Build validator image
        run: |
          cd scripts
          ./varke build

      - name: Prepare env.conf file
        env:
          MAIN_SECRET: ${{ secrets.MAIN_SECRET }}
        run: |
          # TODO decrypt by using gpg and secret passphrase
          cd scripts
          cp /home/sles/env.conf.ci env.conf # .gpg

  # Provisions K3S cluster with Longhorn
  deploy-local:
    needs: [preparation]
    runs-on: self-hosted

    outputs:
      # Stores what's needed by another steps and jobs
      CLUSTER_LOCAL_ID: ${{ steps.get-local-cluster-id.outputs.CLUSTER_LOCAL_ID }}

    steps:
      # Deploys K3S with given version and Longhorn from upstream helm repo
      - name: Deploy local K3S with Longhorn
        id: k3s-longhorn-local
        env:
          K3S_VERSION: ${{ github.event.inputs.k3s_version }}
        run: |
          cd scripts
          sed -i 's/-it/-i/g' varke || true # if done already
          #docker run --cgroupns=host --net=host -i -v $PWD:/app validator:rke \
          ./varke run \
            -p k3s \
            -n 1:2 -t longhorn \
            -e SUFFIX=th-ci-k3s-longhorn \
            -v $K3S_VERSION \
            -k

      - name: Store CLUSTER_LOCAL_ID
        id: get-local-cluster-id
        if: always()
        run: |
          cd scripts
          CLUSTER_LOCAL_ID=$(./validator_s390 -r | grep 'longhorn' | awk '{print $3}')
          echo "CLUSTER_LOCAL_ID=$CLUSTER_LOCAL_ID" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: local-cluster-deployment
          path: scripts/${{steps.get-local-cluster-id.outputs.CLUSTER_LOCAL_ID}}/logs/

  cleanup:
    runs-on: self-hosted
    needs: [deploy-local]
    if: ${{ always() && !github.event.inputs.keep_env }}
    
    steps:
      - name: Destroy cluster(s)
        run: |
          cd scripts
          ./varke run -R

      - name: Clean _work dir
        if: always()
        uses: colpal/actions-clean@v1
